id: 02_download_csv
namespace: zoomcamp

inputs:
  - id: season_start
    type: INT
    displayName: Select earliest season for analysis
    defaults: 2000
    required: true
    min: 2000

  - id: season_end
    type: INT
    displayName: Select latest season for analysis
    defaults: 2024
    required: true
    max: 2024
    
variables:
  bucket_item_count: "{{ outputs.list_storage_items.blobs | length }}"
  gcs_file: "gs://{{kv('GCP_BUCKET_NAME')}}/premierleague_{{ render(inputs.season_start) ~ '-' ~ render(inputs.season_end) }}.csv"
  gcs_premierleague_raw: "{{ outputs.upload_gcs.uri }}"
  # table: "{{kv('GCP_DATASET')}}.gp_{{trigger.date | date('yyyy-MM-dd')}}"
  # data: "{{outputs.download_data.outputFiles['gp_' ~ (trigger.date | date('yyyy-MM-dd')) ~ '.csv']}}"
  # previous_date: "{{ trigger.previous | date('yyyy-MM-dd') }}"
  # year_last2d: "{{ inputs.season_start | string | slice(2,4) }}"
  # next_year_last2d: "{{ render(inputs.season_start + 1) | string | slice(2,4) }}"
  # season: "{{ render(vars.year_last2d) ~ render(vars.next_year_last2d)}}"
  # uri: "https://www.football-data.co.uk/mmz4281/{{ render(vars.season) }}/E0.csv"
  # data: "{{ render(outputs.download_csv.uri) }}"
  # file: "{{'premierleague_' ~ render(vars.season) ~ '.csv'}}"
  # gcs_file: "gs://{{ kv('GCP_BUCKET_NAME') }}/{{ vars.file }}"

tasks:
  
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      season_start: "{{inputs.season_start}}"
      season_end: "{{inputs.season_end}}"

  - id: download_data
    type: io.kestra.plugin.scripts.python.Script
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    beforeCommands:
    - python3 -m venv .venv      
    - . .venv/bin/activate
    - pip install pandas pyarrow
    outputFiles:      
      - "premierleague.csv"
    script: |
      import pandas as pd
      import datetime
      url_prefix="https://www.football-data.co.uk/mmz4281/"
      url_suffix="/E0.csv"
      df_list = []
      cols=["Date","HomeTeam","AwayTeam","FTHG","FTAG","FTR","HTHG","HTAG","HTR","Referee","HS","AS","HST","AST","HC","AC","HF","AF","HY","AY","HR","AR"]
      for i in range({{ inputs.season_start }}, {{ inputs.season_end+1 }}):
        season=str(i)[-2:]+str(i+1)[-2:]
        url = url_prefix + season + url_suffix
        df = pd.read_csv(url, sep=',', usecols=cols, encoding='windows-1252', engine='python')
        df.insert(0, "Season", str(i)+"/"+str(i+1)[-2:])
        df = df.dropna()
        try:
          df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y').dt.strftime('%Y-%m-%d')
        except:
          df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%Y').dt.strftime('%Y-%m-%d')
        for col in cols:
          try:
            df[col] = df[col].astype('int')
          except:
            pass 
        df = df.rename(columns={"Date": "MatchDate"})
        df_list.append(df)
      pd.concat(df_list, ignore_index=True).to_csv("premierleague.csv", index=False)

  - id: list_storage_items
    type: io.kestra.plugin.gcp.gcs.List
    from: "gs://{{kv('GCP_BUCKET_NAME')}}"
    serviceAccount: "{{kv('GCP_CREDS')}}"
    
  - id: check_storage
    type: io.kestra.plugin.core.flow.If
    condition: "{{ render(vars.bucket_item_count) }} > 0"
    then:
    - id: delete_from_gcs
      type: io.kestra.plugin.gcp.gcs.DeleteList
      from: "gs://{{kv('GCP_BUCKET_NAME')}}"
      serviceAccount: "{{kv('GCP_CREDS')}}"

  - id: upload_gcs
    type: io.kestra.plugin.gcp.gcs.Upload
    from: "{{ outputs.download_data.outputFiles['premierleague.csv'] }}"
    to: "{{render(vars.gcs_file)}}"
    serviceAccount: "{{kv('GCP_CREDS')}}"

  - id: bq_table_creation
    type: io.kestra.plugin.gcp.bigquery.Query
    serviceAccount: "{{kv('GCP_CREDS')}}"
    projectId: "{{kv('GCP_PROJECT_ID')}}"
    sql: |
      CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.premierleague_dataset`
      (
          unique_row_id BYTES OPTIONS (description = 'A unique identifier generated by hashing season/match attributes'),
          Season STRING OPTIONS (description = 'Season in which match was played'),      
          MatchDate DATE OPTIONS (description = 'Date which match was played in a particular season'),
          HomeTeam STRING OPTIONS (description = 'Home team'),
          AwayTeam STRING OPTIONS (description = 'Away team'),
          FullTimeHomeTeamGoals INTEGER OPTIONS (description = 'Goals scored by home team after 90 min'),
          FullTimeAwayTeamGoals INTEGER OPTIONS (description = 'Goals scored by away team after 90 min'),
          FullTimeResult STRING OPTIONS (description = 'Full Time Result denoted by: H=Home Win, D=Draw, A=Away Win'),
          HalfTimeHomeTeamGoals INTEGER OPTIONS (description = 'Goals scored by home team after 45 min'),
          HalfTimeAwayTeamGoals INTEGER OPTIONS (description = 'Goals scored by away team after 45 min'),
          HalfTimeResult STRING OPTIONS (description = 'Half Time Result denoted by: H=Home Win, D=Draw, A=Away Win'),
          Referee STRING OPTIONS (description = 'Referee who officiated a particular Premier League game'),
          HomeTeamShots INTEGER OPTIONS (description = 'Total shots made by home team'),
          AwayTeamShots INTEGER OPTIONS (description = 'Total shots made by away team'),
          HomeTeamShotsOnTarget INTEGER OPTIONS (description = 'Total shots on target made by home team'),
          AwayTeamShotsOnTarget INTEGER OPTIONS (description = 'Total shots on target made by away team'),
          HomeTeamCorners INTEGER OPTIONS (description = 'Total corners made by home team'),
          AwayTeamCorners INTEGER OPTIONS (description = 'Total corners made by away team'),
          HomeTeamFoulsCommitted INTEGER OPTIONS (description = 'Total fouls committed by home team'),
          AwayTeamFoulsCommitted INTEGER OPTIONS (description = 'Total fouls committed by away team'),
          HomeTeamYellowCards INTEGER OPTIONS (description = 'Total yellow cards incurred by home team'),
          AwayTeamYellowCards INTEGER OPTIONS (description = 'Total yellow cards incurred by away team'),
          HomeTeamRedCards INTEGER OPTIONS (description = 'Total red cards incurred by home team'),
          AwayTeamRedCards INTEGER OPTIONS (description = 'Total red cards incurred by away team')
      )
      PARTITION BY MatchDate
      CLUSTER BY season;

  - id: bq_read_csv
    type: io.kestra.plugin.gcp.bigquery.Query
    serviceAccount: "{{kv('GCP_CREDS')}}"
    projectId: "{{kv('GCP_PROJECT_ID')}}"
    sql: |
        CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.premierleague_raw`
        (
          Season STRING OPTIONS (description = 'Season in which match was played'),      
          MatchDate DATE OPTIONS (description = 'Date which match was played in a particular season'),
          HomeTeam STRING OPTIONS (description = 'Home team'),
          AwayTeam STRING OPTIONS (description = 'Away team'),
          FullTimeHomeTeamGoals INTEGER OPTIONS (description = 'Goals scored by home team after 90 min'),
          FullTimeAwayTeamGoals INTEGER OPTIONS (description = 'Goals scored by away team after 90 min'),
          FullTimeResult STRING OPTIONS (description = 'Full Time Result denoted by: H=Home Win, D=Draw, A=Away Win'),
          HalfTimeHomeTeamGoals INTEGER OPTIONS (description = 'Goals scored by home team after 45 min'),
          HalfTimeAwayTeamGoals INTEGER OPTIONS (description = 'Goals scored by away team after 45 min'),
          HalfTimeResult STRING OPTIONS (description = 'Half Time Result denoted by: H=Home Win, D=Draw, A=Away Win'),
          Referee STRING OPTIONS (description = 'Referee who officiated a particular Premier League game'),
          HomeTeamShots INTEGER OPTIONS (description = 'Total shots made by home team'),
          AwayTeamShots INTEGER OPTIONS (description = 'Total shots made by away team'),
          HomeTeamShotsOnTarget INTEGER OPTIONS (description = 'Total shots on target made by home team'),
          AwayTeamShotsOnTarget INTEGER OPTIONS (description = 'Total shots on target made by away team'),
          HomeTeamCorners INTEGER OPTIONS (description = 'Total corners made by home team'),
          AwayTeamCorners INTEGER OPTIONS (description = 'Total corners made by away team'),
          HomeTeamFoulsCommitted INTEGER OPTIONS (description = 'Total fouls committed by home team'),
          AwayTeamFoulsCommitted INTEGER OPTIONS (description = 'Total fouls committed by away team'),
          HomeTeamYellowCards INTEGER OPTIONS (description = 'Total yellow cards incurred by home team'),
          AwayTeamYellowCards INTEGER OPTIONS (description = 'Total yellow cards incurred by away team'),
          HomeTeamRedCards INTEGER OPTIONS (description = 'Total red cards incurred by home team'),
          AwayTeamRedCards INTEGER OPTIONS (description = 'Total red cards incurred by away team')
        )
        OPTIONS (
            format = 'csv',
            uris = ["{{render(vars.gcs_premierleague_raw)}}"],
            skip_leading_rows = 1
        );

  - id: bq_table_truncate
    type: io.kestra.plugin.gcp.bigquery.Query
    serviceAccount: "{{kv('GCP_CREDS')}}"
    projectId: "{{kv('GCP_PROJECT_ID')}}"
    sql: |
      TRUNCATE TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.premierleague_dataset`;

  - id: bq_data_insert
    type: io.kestra.plugin.gcp.bigquery.Query
    serviceAccount: "{{kv('GCP_CREDS')}}"
    projectId: "{{kv('GCP_PROJECT_ID')}}"
    sql: |
      INSERT INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.premierleague_dataset`
      SELECT
          MD5(CONCAT(
            COALESCE(CAST(Season AS STRING), ""),
            COALESCE(CAST(HomeTeam AS STRING), ""),
            COALESCE(CAST(AwayTeam AS STRING), "")
          )) AS unique_row_id, *
        FROM `capstone-455515.capstone_dataset_2025.premierleague_raw`;

  - id: bq_drop_raw
    type: io.kestra.plugin.gcp.bigquery.Query
    serviceAccount: "{{kv('GCP_CREDS')}}"
    projectId: "{{kv('GCP_PROJECT_ID')}}"
    sql: |
      DROP TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.premierleague_raw`;

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: If you'd like to explore Kestra outputs, disable it.
    disabled: false